hist(bla, col = "3")
hist(big, col = "2")
var.test(big, nla)
var.test(big, bla)
diff <- bla - big
t.test(mean(big) - mean(bla), mu = 0)
t.test(big - bla, mu = 0)
t.test(big,bla, paired = T, mu = 0)
t.test(big,bla, paired = T, mu = 0)
t.test(big,bla)
t.test(big,bla,paired = F, mu = 0)
#--------question 2-------
qqnorm(diff)
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("knitr"
AZRF
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
file = "dpt2021_txt.zip"
if(!file.exists(file)){
download.file("https://www.insee.fr/fr/statistiques/fichier/2540004/dpt2021_csv.zip",
destfile=file)
}
unzip(file)
library(tidyverse)
library(ggplot2);
FirstNames <- read_delim("dpt2021.csv",delim=";", col_types = "fciii", na=c("xx","xxxx"))
FirstNames %>%
filter(ls,na(annais)) %>%
group_by(annais, sexe) %>%
summarise(sum=sum(nombre))%>%
ggplot(data=FirstNames)+
aes(x =c(annais,sexe), y=sum)
FirstNames %>%
filter(!is(na(annais)) %>%
group_by(annais, sexe) %>%
summarise(sum=sum(nombre))%>%
ggplot(data=FirstNames)+
aes(x =annais, y=sum,color=sexe);
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(maps)
library(sf)
install.packages("sf")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(maps)
library(sf)
df <- read_delim("data/data.csv", delim = ";",
escape_double = FALSE, col_types = cols(Num_Acc = col_character(),
id_vehicule = col_character(), hrmn = col_time(format = "%H:%M"),
lat = col_character()), trim_ws = TRUE)
# ajustement sur les données
# long et lat as numeric
df$lat <- sub(",", ".", df$lat)
df$long <- sub(",", ".", df$long)
df$lat <- as.numeric(df$lat)
df$long <- as.numeric(df$long)
# magouille pour éliminer les caractères spéciaux de région
df$region <- iconv(df$region, from = "ISO-8859-1", to = "UTF-8")
df$region <- sub("ï¿½Ã®", "î", df$region)
# charcter bizarre dans id_vehicule
df$id_vehicule <- iconv(df$id_vehicule, from = "ISO-8859-1", to = "UTF-8")
df$id_vehicule <- as.character(df$id_vehicule)
# accidents par année de naissance en 2021
plot_acc <- df %>% group_by(df$Num_Acc, df$mois) %>% summarize("count" = n())
ggplot(data = plot_acc, aes(x=`df$mois`, y=count, fill=`df$mois`)) +
geom_bar(stat="identity") + ylab("nombre d'accident") + xlab("mois") + ggtitle("Nombre d'accidents par mois en 2021");
rm(plot_acc)
## remettre dans l'ordre les chiffres de grav
# accidents par année de naissance en 2021
plot_usagers <- df %>% group_by(age, grav) %>% summarize("count" = n()) %>% filter(grav == 2)
ggplot(data = plot_usagers, aes(x=age, y=count, fill=grav)) +
geom_bar(stat="identity");
## par age ca serait pas mal
## par sexe
# Nombre de personne touchées par les accidents par sexe en 2021
table(df$sexe)
# plot des conducteurs/trices impliqués dans un accident par sexe en 2021
plot_sexe <- df %>% group_by(sexe) %>% filter(place == 1) %>% summarize("count" = n())
#plot_sexe <- transform( data_frame, sexe1= c("NA", "Homme", "Femme"))
#ggplot(data = plot_sexe, aes(x=sexe, y=count, fill=sexe)) + geom_bar(stat="identity");
rm(plot_usagers, plot_sexe)
# Importer les données géographiques
regions_geojson <- st_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions-version-simplifiee.geojson")
install.packages(sf)
install.packages(sf)
install.packages("sf")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(maps)
library(sf)
df <- read_delim("data/data.csv", delim = ";",
escape_double = FALSE, col_types = cols(Num_Acc = col_character(),
id_vehicule = col_character(), hrmn = col_time(format = "%H:%M"),
lat = col_character()), trim_ws = TRUE)
# ajustement sur les données
# long et lat as numeric
df$lat <- sub(",", ".", df$lat)
df$long <- sub(",", ".", df$long)
df$lat <- as.numeric(df$lat)
df$long <- as.numeric(df$long)
# magouille pour éliminer les caractères spéciaux de région
df$region <- iconv(df$region, from = "ISO-8859-1", to = "UTF-8")
df$region <- sub("ï¿½Ã®", "î", df$region)
# charcter bizarre dans id_vehicule
df$id_vehicule <- iconv(df$id_vehicule, from = "ISO-8859-1", to = "UTF-8")
df$id_vehicule <- as.character(df$id_vehicule)
# accidents par année de naissance en 2021
plot_acc <- df %>% group_by(df$Num_Acc, df$mois) %>% summarize("count" = n())
plot_acc <- case_when(
data$dep %in% c("01") ~ ""
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(maps)
library(sf)
df <- read_delim("data/data.csv", delim = ";",
escape_double = FALSE, col_types = cols(Num_Acc = col_character(),
id_vehicule = col_character(), hrmn = col_time(format = "%H:%M"),
lat = col_character()), trim_ws = TRUE)
# ajustement sur les données
# long et lat as numeric
df$lat <- sub(",", ".", df$lat)
df$long <- sub(",", ".", df$long)
df$lat <- as.numeric(df$lat)
df$long <- as.numeric(df$long)
# magouille pour éliminer les caractères spéciaux de région
df$region <- iconv(df$region, from = "ISO-8859-1", to = "UTF-8")
df$region <- sub("ï¿½Ã®", "î", df$region)
# charcter bizarre dans id_vehicule
df$id_vehicule <- iconv(df$id_vehicule, from = "ISO-8859-1", to = "UTF-8")
df$id_vehicule <- as.character(df$id_vehicule)
# accidents par année de naissance en 2021
plot_acc <- df %>% group_by(df$Num_Acc, df$mois) %>% summarize("count" = n())
plot_acc <- case_when(
data$dep %in% c("01") ~ ""
)
## remettre dans l'ordre les chiffres de grav
# accidents par année de naissance en 2021
plot_usagers <- df %>% group_by(age, grav) %>% summarize("count" = n()) %>% filter(grav == 2)
ggplot(data = plot_usagers, aes(x=age, y=count, fill=grav)) +
geom_bar(stat="identity");
## par age ca serait pas mal
## par sexe
# Nombre de personne touchées par les accidents par sexe en 2021
table(df$sexe)
# plot des conducteurs/trices impliqués dans un accident par sexe en 2021
plot_sexe <- df %>% group_by(sexe) %>% filter(place == 1) %>% summarize("count" = n())
#plot_sexe <- transform( data_frame, sexe1= c("NA", "Homme", "Femme"))
#ggplot(data = plot_sexe, aes(x=sexe, y=count, fill=sexe)) + geom_bar(stat="identity");
rm(plot_usagers, plot_sexe)
library(xfun)
library(dplyr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(maps)
library(sf)
library(xfun)
library(dplyr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(maps)
library(sf)
library(lubridate)
df <- read_delim("data/data.csv", delim = ";",
escape_double = FALSE, col_types = cols(Num_Acc = col_character(),
id_vehicule = col_character(), hrmn = col_time(format = "%H:%M"),
lat = col_character()), trim_ws = TRUE)
# ajustement sur les données
# long et lat as numeric
df$lat <- sub(",", ".", df$lat)
df$long <- sub(",", ".", df$long)
df$lat <- as.numeric(df$lat)
df$long <- as.numeric(df$long)
# magouille pour éliminer les caractères spéciaux de région
df$region <- iconv(df$region, from = "ISO-8859-1", to = "UTF-8")
df$region <- sub("ï¿½Ã®", "î", df$region)
# charcter bizarre dans id_vehicule
df$id_vehicule <- iconv(df$id_vehicule, from = "ISO-8859-1", to = "UTF-8")
df$id_vehicule <- as.character(df$id_vehicule)
# accidents par mois en 2021
plot_acc <- df %>% group_by(mois) %>% summarize("count" = n())
# mois nom
noms_mois <- c("janv", "févr", "mars", "avr", "mai", "juin", "juil", "août", "sept", "oct", "nov", "déc")
mois_ordre <- factor(noms_mois, levels = noms_mois)
# fonction pour associer le numéro de mois à son nom abrégé
nom_mois <- function(num_mois) {
return(noms_mois[num_mois])
}
plot_acc$nom_mois <- factor(sapply(plot_acc$mois, nom_mois), levels = mois_ordre)
# plot
ggplot(data = plot_acc, aes(x=nom_mois, y=count)) +
geom_col(stat="identity", fill="darkred") +
ylab("nombre d'accidents") +
xlab("") +
ggtitle("Nombre d'accidents par mois en 2021")
rm(plot_acc, noms_mois)
# créer la colonne "heure"
# df$heure <- hms(sprintf("%02d:%02d:00", df$hrmn %/% 100, df$hrmn %% 100))
# Créer une colonne "heure_de_la_journee" contenant la tranche horaire de l'accident
df$heure_de_la_journee <- cut(as.integer(substr(df$hrmn, 1, 2)), breaks = c(-Inf, 6, 12, 18, Inf), labels = c("Nuit", "Matin", "Après-midi", "Soir"))
# Compter le nombre d'accidents par heure de la journée
accidents_par_heure <- df %>%
group_by(heure_de_la_journee) %>%
summarise(nombre_accidents = n()) %>%
arrange(heure_de_la_journee)
# Visualiser le nombre d'accidents par heure de la journée
ggplot(accidents_par_heure, aes(x = heure_de_la_journee, y = nombre_accidents)) +
geom_bar(stat = "identity", fill = "darkred") +
xlab("") +
ylab("Nombre d'accidents") +
ggtitle("Nombre d'accidents par période de la journée en 2021")
# Sous-ensemble de données contenant l'âge et le nombre d'accidents pour chaque âge
sub_df <- df %>% filter(place == 1, catu == 1, age > 13) %>%
group_by(age) %>%
summarise(nombre_accidents = n()) %>%
filter(!is.na(age))
# Créer un boxplot avec le nombre d'accidents sur l'axe x et l'âge sur l'axe y
ggplot(sub_df, aes(x = nombre_accidents, y = age)) +
geom_boxplot() +
ylab("Âge du conducteur") +
xlab("Nombre d'accidents") +
coord_flip() + ggtitle("Boxplot sur l'âge des conducteurs/conductrices")
# Afficher les statistiques du boxplot
print(boxplot.stats(sub_df$age))
## remettre dans l'ordre les chiffres de grav
# accidents par année de naissance en 2021
plot_usagers <- df %>% filter(catu == 1, age > 13) %>% group_by(age, grav) %>% summarize("count" = n()) %>% filter(grav == 2)
ggplot(data = plot_usagers, aes(x=age, y=count, fill=grav)) +
geom_bar(stat="identity") + geom_smooth(se=FALSE, color = "orange") + ggtitle("Effectif des accidents mortels par âge du conducteurs")+    theme(legend.position='none') + xlab("Âge du conducteur") + ylab("Effectif")
plot_usagers <- df %>% group_by(age, grav) %>% summarize("count" = n()) %>% filter(grav == 2)
ggplot(data = plot_usagers, aes(x=age, y=count, fill=grav)) +
geom_bar(stat="identity") + geom_smooth(se=FALSE, color = "orange") + ggtitle("Effectif des accidents mortels par âge des personnes touchées")+    theme(legend.position='none') + xlab("Âge") + ylab("Effectif")
rm(plot_usagers, plot_sexe)
library(xfun)
library(dplyr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(maps)
library(sf)
library(lubridate)
df <- read_delim("data/data.csv", delim = ";",
escape_double = FALSE, col_types = cols(Num_Acc = col_character(),
id_vehicule = col_character(), hrmn = col_time(format = "%H:%M"),
lat = col_character()), trim_ws = TRUE)
# ajustement sur les données
# long et lat as numeric
df$lat <- sub(",", ".", df$lat)
df$long <- sub(",", ".", df$long)
df$lat <- as.numeric(df$lat)
df$long <- as.numeric(df$long)
# magouille pour éliminer les caractères spéciaux de région
df$region <- iconv(df$region, from = "ISO-8859-1", to = "UTF-8")
df$region <- sub("ï¿½Ã®", "î", df$region)
# charcter bizarre dans id_vehicule
df$id_vehicule <- iconv(df$id_vehicule, from = "ISO-8859-1", to = "UTF-8")
df$id_vehicule <- as.character(df$id_vehicule)
# accidents par mois en 2021
plot_acc <- df %>% group_by(mois) %>% summarize("count" = n())
# mois nom
noms_mois <- c("janv", "févr", "mars", "avr", "mai", "juin", "juil", "août", "sept", "oct", "nov", "déc")
mois_ordre <- factor(noms_mois, levels = noms_mois)
# fonction pour associer le numéro de mois à son nom abrégé
nom_mois <- function(num_mois) {
return(noms_mois[num_mois])
}
plot_acc$nom_mois <- factor(sapply(plot_acc$mois, nom_mois), levels = mois_ordre)
# plot
ggplot(data = plot_acc, aes(x=nom_mois, y=count)) +
geom_col(stat="identity", fill="darkred") +
ylab("nombre d'accidents") +
xlab("") +
ggtitle("Nombre d'accidents par mois en 2021")
rm(plot_acc, noms_mois)
# créer la colonne "heure"
# df$heure <- hms(sprintf("%02d:%02d:00", df$hrmn %/% 100, df$hrmn %% 100))
# Créer une colonne "heure_de_la_journee" contenant la tranche horaire de l'accident
df$heure_de_la_journee <- cut(as.integer(substr(df$hrmn, 1, 2)), breaks = c(-Inf, 6, 12, 18, Inf), labels = c("Nuit", "Matin", "Après-midi", "Soir"))
# Compter le nombre d'accidents par heure de la journée
accidents_par_heure <- df %>%
group_by(heure_de_la_journee) %>%
summarise(nombre_accidents = n()) %>%
arrange(heure_de_la_journee)
# Visualiser le nombre d'accidents par heure de la journée
ggplot(accidents_par_heure, aes(x = heure_de_la_journee, y = nombre_accidents)) +
geom_bar(stat = "identity", fill = "darkred") +
xlab("") +
ylab("Nombre d'accidents") +
ggtitle("Nombre d'accidents par période de la journée en 2021")
# Sous-ensemble de données contenant l'âge et le nombre d'accidents pour chaque âge
sub_df <- df %>% filter(place == 1, catu == 1, age > 13) %>%
group_by(age) %>%
summarise(nombre_accidents = n()) %>%
filter(!is.na(age))
# Créer un boxplot avec le nombre d'accidents sur l'axe x et l'âge sur l'axe y
ggplot(sub_df, aes(x = nombre_accidents, y = age)) +
geom_boxplot() +
ylab("Âge du conducteur") +
xlab("Nombre d'accidents") +
coord_flip() + ggtitle("Boxplot sur l'âge des conducteurs/conductrices")
# Afficher les statistiques du boxplot
print(boxplot.stats(sub_df$age))
## remettre dans l'ordre les chiffres de grav
# accidents par année de naissance en 2021
plot_usagers <- df %>% filter(catu == 1, age > 13) %>% group_by(age, grav) %>% summarize("count" = n()) %>% filter(grav == 2)
ggplot(data = plot_usagers, aes(x=age, y=count, fill=grav)) +
geom_bar(stat="identity") + geom_smooth(se=FALSE, color = "orange") + ggtitle("Effectif des accidents mortels par âge du conducteurs")+    theme(legend.position='none') + xlab("Âge du conducteur") + ylab("Effectif")
plot_usagers <- df %>% group_by(age, grav) %>% summarize("count" = n()) %>% filter(grav == 2)
ggplot(data = plot_usagers, aes(x=age, y=count, fill=grav)) +
geom_bar(stat="identity") + geom_smooth(se=FALSE, color = "orange") + ggtitle("Effectif des accidents mortels par âge des personnes touchées")+    theme(legend.position='none') + xlab("Âge") + ylab("Effectif")
rm(plot_usagers, plot_sexe)
# Sous-ensemble de données contenant la gravité de l'accident et l'âge du conducteur
sub_df <- df[, c("grav", "age")]
# Supprimer les lignes où l'âge est manquant
sub_df <- na.omit(sub_df)
# Créer un graphique de densité pour la gravité de l'accident par tranche d'âge
ggplot(sub_df, aes(x = age, fill = factor(grav))) +
geom_density(alpha = 0.5) +
xlab("Âge") +
ylab("Densité") +
scale_fill_discrete(name = "Gravité de l'accident",
labels = c("Indemne", "Blessé léger", "Blessé hospitalisé", "Mort")) + ggtitle("Densité des accidents par âge des personnes touchées")
## concept de regression logistique :  il s'agit d'expliquer au mieux une variable binaire (la présence ou l'absence d'une caractéristique donnée) par des observations réelles nombreuses
# Créer une variable binaire pour la gravité de l'accident (1 si l'accident est grave, 0 sinon)
sub_df$grav_bin <- ifelse(sub_df$grav > 1, 1, 0)
# Supprimer les lignes où l'âge est manquant
sub_df <- na.omit(sub_df)
# Effectuer la régression logistique
model <- glm(grav_bin ~ age, data = sub_df, family = binomial())
# Résumé de la régression logistique
summary(model)
##############################################################################################
######################### Notes sur les significations des résultats #########################
##############################################################################################
# Call : indique la formule utilisée pour ajuster le modèle, les options et les données.
#
# Deviance Residuals : affiche les résidus de deviance pour chaque observation. La deviance est un critère qui mesure l'ajustement du modèle aux données. Les résidus de deviance indiquent si le modèle prédit correctement la gravité de l'accident.
#
# Coefficients : fournit les coefficients de régression estimés pour chaque variable d'entrée. Dans ce cas, il y a une seule variable d'entrée, l'âge. Pour chaque année d'augmentation de l'âge, la probabilité de subir un accident mortel diminue de 0,6 % (coefficient négatif). Le coefficient de l'interception indique la probabilité de subir un accident mortel pour une personne de 0 an (en pratique cela n'a pas de sens, il s'agit d'une propriété mathématique du modèle).
#
# Signif. codes : indique le niveau de signification de chaque coefficient estimé. Les étoiles servent à représenter différents niveaux de significativité : *** pour un niveau très significatif, ** pour un niveau significatif, * pour un niveau de signification modéré, . pour un niveau de signification faible.
#
# Dispersion parameter : fournit l'estimation de la variance de la distribution des résidus.
#
# Null deviance : indique la deviance du modèle nul, c'est-à-dire un modèle qui ne contient aucune variable explicative.
#
# Residual deviance : indique la deviance résiduelle du modèle, c'est-à-dire la deviance restante après avoir ajusté le modèle aux données.
#
# AIC : fournit le critère d'information d'Akaike, un critère d'ajustement qui tient compte de la complexité du modèle et de l'ajustement aux données.
#
# Number of Fisher Scoring iterations : indique le nombre d'itérations nécessaires pour estimer les paramètres du modèle.
sub_df <- df[, c("grav", "sexe")]
# enleve les na
sub_df <- na.omit(sub_df) %>% filter(sexe != -1)
tab <- table(sub_df$sexe, sub_df$grav)
# Conversion de la table croisée en un data frame
df_s <- as.data.frame.matrix(tab)
df_s$sexe <- rownames(df_s)
# Mise en forme des données pour un diagramme en barres empilées
df_long <- tidyr::gather(df_s, key = "grav", value = "count", -sexe)
df_long$grav <- factor(df_long$grav, levels = c("1", "2", "3", "4"))
df_long$sexe <- factor(df_long$sexe, levels = c("1", "2"))
# Convertir la variable grav en factor avec les niveaux correspondants
df_long$grav <- factor(df_long$grav, levels = 1:4,
labels = c("Indemne", "Mort", "Blessé hospitalisé", "Blessé léger"))
df_long$sexe <- factor(df_long$sexe, levels = 1:2,
labels = c("Homme", "Femme"))
# Définir les couleurs personnalisées
colors <- c("Homme" = "pink",
"Femme" = "lightblue")
# Réorganiser les niveaux de la variable "grav" en fonction de la fréquence
df_long$grav <- reorder(df_long$grav, desc(df_long$count))
# Créer le graphique
ggplot(df_long, aes(x = grav, fill = sexe)) +
geom_col(position = "dodge", aes(y = count)) +
scale_fill_manual(values = colors, name = "Sexe",
labels = c("Homme", "Femme")) +
labs(title = "Gravité des accidents par sexe", x = "", y = "Nombre d'accidents") + theme_gray()
d <- df %>% filter(age > 13, catu == 1)
sub_df <- d[, c("grav", "sexe")]
# enleve les na
sub_df <- na.omit(sub_df) %>% filter(sexe != -1)
tab <- table(sub_df$sexe, sub_df$grav)
# Conversion de la table croisée en un data frame
df_s <- as.data.frame.matrix(tab)
df_s$sexe <- rownames(df_s)
# Mise en forme des données pour un diagramme en barres empilées
df_long <- tidyr::gather(df_s, key = "grav", value = "count", -sexe)
df_long$grav <- factor(df_long$grav, levels = c("1", "2", "3", "4"))
df_long$sexe <- factor(df_long$sexe, levels = c("1", "2"))
# Convertir la variable grav en factor avec les niveaux correspondants
df_long$grav <- factor(df_long$grav, levels = 1:4,
labels = c("Indemne", "Mort", "Blessé hospitalisé", "Blessé léger"))
df_long$sexe <- factor(df_long$sexe, levels = 1:2,
labels = c("Homme", "Femme"))
# Définir les couleurs personnalisées
colors <- c("Homme" = "pink",
"Femme" = "lightblue")
# Réorganiser les niveaux de la variable "grav" en fonction de la fréquence
df_long$grav <- reorder(df_long$grav, desc(df_long$count))
# Créer le graphique
ggplot(df_long, aes(x = grav, fill = sexe)) +
geom_col(position = "dodge", aes(y = count)) +
scale_fill_manual(values = colors, name = "Sexe",
labels = c("Homme", "Femme")) +
labs(title = "Gravité des accidents par sexe du conducteur", x = "", y = "Nombre d'accidents") + theme_gray()
#test du X²
df_conducteurs <- df %>% filter(catu == 1, age > 13)
chisq.test(table(df_conducteurs$sexe, df_conducteurs$grav))
################### carte du rapport accident_mortel / nb accidents * 100 en France en 2021
# Importer les données géographiques
regions_geojson <- st_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions-version-simplifiee.geojson")
# Calculer le nombre d'accidents par région
df_region <- df %>%
group_by(region) %>%
summarise(n_accidents = n())
# Fusionner les données géographiques et les données de nombre d'accidents
map_df <- left_join(regions_geojson, df_region, by = c("nom" = "region"))
# Créer la carte
ggplot() +
geom_sf(data = map_df, aes(fill = n_accidents)) +
scale_fill_gradient(low = "lightyellow", high = "darkred") +
ggtitle("Nombre d'accidents par région en France en 2021") +
labs(fill="Nombre d'accidents") +
theme_void()
########### carte du nombre d'accidents par région en France en 2021
# Calculer le nombre d'accidents par région
df_region <- df %>%
group_by(region) %>%
summarise(n_accidents = n(),
n_accidents_mortels = sum(grav == 2),
taux_accidents_mortels = round(sum(grav == 2)/n_accidents, 4)*100)
# Fusionner les données géographiques et les données de nombre d'accidents
map_df <- left_join(regions_geojson, df_region, by = c("nom" = "region"))
# Créer la carte
ggplot() +
geom_sf(data = map_df, aes(fill = taux_accidents_mortels)) +
scale_fill_gradient(low = "lightyellow", high = "darkred") +
ggtitle("Rapport du nombre d'accidents mortels sur le nombre d'accidents par région") +
labs(fill = "Taux d'accidents graves") +
theme_void()
# Créer une table de contingence croisant la région et la gravité de l'accident
cont_table <- table(df$region, df$grav)
# Effectuer le test du chi2
chi2 <- chisq.test(cont_table)
chi2
# Importer les données géographiques
deps_geojson <- st_read("https://france-geojson.gregoiredavid.fr/repo/departements.geojson")
# Calculer le nombre d'accidents par région
df_dep <- df %>%
group_by(dep) %>%
summarise(n_accidents = n())
# Fusionner les données géographiques et les données de nombre d'accidents
map_df <- left_join(deps_geojson, df_dep, by = c("code" = "dep"))
# Créer la carte
ggplot() +
geom_sf(data = map_df, aes(fill = n_accidents)) +
scale_fill_gradient2(low = "lightyellow", mid = "orange",high = "darkred", midpoint = 6000) +
ggtitle("Nombre d'accidents par département en France en 2021") +
labs(fill="Nombre d'accidents") +
theme_void()
########### carte du nombre d'accidents par région en France en 2021
# Calculer le nombre d'accidents par région
df_dep <- df %>%
group_by(dep) %>%
summarise(n_accidents = n(),
n_accidents_mortels = sum(grav == 2),
taux_accidents_mortels = round(sum(grav == 2)/n_accidents, 4)*100)
# Fusionner les données géographiques et les données de nombre d'accidents
map_df <- left_join(deps_geojson, df_dep, by = c("code" = "dep"))
# Créer la carte
ggplot() +
geom_sf(data = map_df, aes(fill = taux_accidents_mortels)) +
scale_fill_gradient(low = "lightyellow", high = "darkred") +
ggtitle("Rapport du nombre d'accidents mortels sur le nombre d'accidents par département") +
labs(fill = "Taux d'accidents graves") +
theme_void()
# Créer une table de contingence croisant la région et la gravité de l'accident
cont_table <- table(df$dep, df$grav)
# Effectuer le test du chi2
chi2 <- chisq.test(cont_table)
chi2
install.packages("tidyverse")
install.packages("tidyverse")
install.packages('ktinr')
df <- read_delim("data/data.csv", delim = ";",
escape_double = FALSE, col_types = cols(Num_Acc = col_character(),
id_vehicule = col_character(), hrmn = col_time(format = "%H:%M"),
lat = col_character()), trim_ws = TRUE)
